# ArgoCD Helm Chart Values

# Global settings
global:
  namespace: argocd

# ArgoCD Server Configuration
server:
  replicas: 1
  image:
    repository: argoproj/argocd
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: LoadBalancer
    ports:
      http: 8080
      grpc: 8081
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    - name: ARGOCD_SERVER_INSECURE
      value: "true"
    - name: ARGOCD_SERVER_DISABLE_AUTH
      value: "true"
    - name: ARGOCD_SERVER_INSECURE_BIND_ADDRESS
      value: "0.0.0.0"
    - name: ARGOCD_REDIS_SERVER
      value: "argocd-redis:6379"
    - name: ARGOCD_REDIS_DB
      value: "0"

# ArgoCD Application Controller Configuration
applicationController:
  replicas: 1
  image:
    repository: argoproj/argocd
    tag: latest
    pullPolicy: IfNotPresent
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# ArgoCD Repository Server Configuration
repoServer:
  replicas: 1
  image:
    repository: argoproj/argocd
    tag: latest
    pullPolicy: IfNotPresent
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Redis Configuration
redis:
  replicas: 1
  image:
    repository: redis
    tag: "6.2.7-alpine"
    pullPolicy: IfNotPresent
  
  service:
    port: 6379
  
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

# ConfigMap data
configMap:
  server.insecure: "true"
  server.disable.auth: "true"
  server.staticassets: "/shared/app"
  repositories: |
    - type: git
      url: https://github.com/KE-WhyNot/INFRA
      name: infra-repo
  application.instanceLabelKey: argocd.argoproj.io/instance
  application.instanceLabelValue: argocd
  log.level: info
  ui.default.repo.url: https://github.com/KE-WhyNot/INFRA
  controller.status.processors: "20"
  controller.operation.processors: "10"
  controller.self.heal.timeout.seconds: "5"
  controller.repo.server.timeout.seconds: "60"
  server.rbac.log.enforce.enable: "true"
  server.enable.gzip: "true"
  repo.server: argocd-repo-server:8081
  redis.server: argocd-redis:6379
  redis.db: "0"
  dex.config: |
    connectors: []
    oidc:
      name: OIDC
      issuer: https://kubernetes.default.svc
      clientId: argocd
      clientSecret: $oidc.clientSecret
      requestedScopes: ["openid", "profile", "email", "groups"]
      requestedIDTokenClaims: {"groups": {"essential": true}}

# Secret data (base64 encoded)
secret:
  server.secretkey: YWJjZGVmZ2hpams=
  oidc.clientSecret: YXJnb2NkLXNlY3JldA==
  admin.password: JDJhJDEwJEVCNmdaNEg2Y2p3d3B2Q2ZaYUNLL1ZzT2dWY0pVZ29VcU5zQ1J0ZU5wTk5uQnE2V0E2
  admin.passwordMtime: MjAyNC0wMS0wMVQwMDowMDowMFo=

# RBAC Configuration
rbac:
  policy:
    default: role:readonly
    csv: |
      p, role:admin, applications, *, */*, allow
      p, role:admin, certificates, *, *, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, repositories, *, *, allow
      g, argocd-admins, role:admin
