# Auth 서비스 배포 매니페스트
# ArgoCD가 이 파일을 참조하여 Auth 서비스를 배포합니다.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: auth-service
  labels:
    app: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
        - name: auth-service
          image: docker.io/9september/auth-service:1e298c23d5f472db96ae5bd815a4c9d47cdd9783 # CI가 실제 이미지 태그로 업데이트
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "kubernetes"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # ConfigMap에서 일반 설정값 로드
            - name: EMAIL_HOST
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: email.host
            - name: EMAIL_PORT
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: email.port
            - name: EMAIL_FROM
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: email.from
            - name: JWT_ACCESS_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: jwt.access.expiration
            - name: JWT_REFRESH_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: jwt.refresh.expiration
            - name: JWT_VERIFICATION_EXPIRATION_MS
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: jwt.verification-expiration-ms
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: spring.data.redis.host
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: spring.data.redis.port
            - name: REDIS_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: spring.data.redis.database
            - name: APP_CLIENT_URL
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: app.client.url
            # Secret에서 민감한 정보 로드
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: jwt.key
            - name: EMAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: email.username
            - name: EMAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: email.password
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: spring.datasource.url
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: spring.datasource.username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: spring.datasource.password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: spring.data.redis.password
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: auth-service
  labels:
    app: auth-service
spec:
  selector:
    app: auth-service
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP
