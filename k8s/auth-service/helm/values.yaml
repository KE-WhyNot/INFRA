# Default values for auth-service
# This is a YAML-formatted file.

# Auth Service configuration
name: auth-service
component: auth-service
partOf: microservices

# Image configuration
image:
  registry: ""
  repository: docker.io/9september/auth-service
  tag: "e0c7259bcd6e04f58d01c1fe86d23ff24d17e6e2"  # This will be updated by CI/CD

# Replica count
replicaCount: 2

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Service configuration
service:
  enabled: true
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: auth.example.com
      paths:
        - path: /
          pathType: Prefix
          servicePort: 80
  tls: []

# ConfigMap configuration
configMap:
  enabled: true
  data:
    SPRING_PROFILES_ACTIVE: "prod"
    SERVER_PORT: "8080"
    LOGGING_LEVEL_ROOT: "INFO"

# Secret configuration
secret:
  enabled: false

# Environment variables
env:
  SPRING_PROFILES_ACTIVE: "prod"
  MANAGEMENT_SERVER_PORT: "8080"
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info"
  MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
  MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED: "true"
  MANAGEMENT_HEALTH_READINESSSTATE_ENABLED: "true"

  # From Secret: auth-service-secret
  SPRING_DATASOURCE_URL:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.datasource.url
  SPRING_DATASOURCE_USERNAME:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.datasource.username
  SPRING_DATASOURCE_PASSWORD:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.datasource.password
  SPRING_DATASOURCE_DRIVER_CLASS_NAME:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.datasource.driver-class-name

  SPRING_DATA_REDIS_HOST:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.data.redis.host
  SPRING_DATA_REDIS_PORT:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.data.redis.port
  SPRING_DATA_REDIS_PASSWORD:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.data.redis.password
  SPRING_DATA_REDIS_DATABASE:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: spring.data.redis.database
  JWT_KEY:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: jwt.key
  JWT_ACCESS_EXPIRATION:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: jwt.access.expiration
  JWT_REFRESH_EXPIRATION:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: jwt.refresh.expiration
  JWT_VERIFICATION_EXPIRATION_MS:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: jwt.verification-expiration-ms
  EMAIL_FROM:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: email.from
  EMAIL_HOST:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: email.host
  EMAIL_PORT:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: email.port
  EMAIL_USERNAME:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: email.username
  EMAIL_PASSWORD:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: email.password
  APP_CLIENT_URL:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: app.client.url
  AUTH_OAUTH2_CLIENTS_GOOGLE_CLIENT_ID:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.google.client-id
  AUTH_OAUTH2_CLIENTS_GOOGLE_CLIENT_SECRET:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.google.client-secret
  AUTH_OAUTH2_CLIENTS_GOOGLE_REDIRECT_URI:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.google.redirect-uri
  AUTH_OAUTH2_CLIENTS_NAVER_CLIENT_ID:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.naver.client-id
  AUTH_OAUTH2_CLIENTS_NAVER_CLIENT_SECRET:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.naver.client-secret
  AUTH_OAUTH2_CLIENTS_NAVER_REDIRECT_URI:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.naver.redirect-uri
  AUTH_OAUTH2_CLIENTS_KAKAO_CLIENT_ID:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.kakao.client-id
  AUTH_OAUTH2_CLIENTS_KAKAO_CLIENT_SECRET:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.kakao.client-secret
  AUTH_OAUTH2_CLIENTS_KAKAO_REDIRECT_URI:
    valueFrom:
      secretKeyRef:
        name: auth-service-secret
        key: auth.oauth2.clients.kakao.redirect-uri

# Resources
resources:
  limits:
    cpu: 300m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

# Pod configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/actuator/prometheus"

startupProbe:
  httpGet:
    path: /actuator/health
    port: 8080
  initialDelaySeconds: 180
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 30

# Health checks
livenessProbe:
  httpGet:
    path: /actuator/health
    port: 8080
  initialDelaySeconds: 180
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 12

# Readiness probe (disabled)
readinessProbe: null

# Service account
serviceAccount:
  create: true
  name: ""

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false  # Spring Boot가 임시 파일을 생성할 수 있도록 수정
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL
