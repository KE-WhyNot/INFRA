# Default values for nginx-ingress
name: nginx-ingress
component: ingress-controller
partOf: infrastructure

# Image configuration
image:
  registry: ""
  repository: k8s.gcr.io/ingress-nginx/controller
  tag: "v1.8.1"

# Replica count
replicaCount: 2

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

# Service configuration
service:
  enabled: true
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https

# ConfigMap configuration
configMap:
  enabled: true
  data:
    # Nginx configuration
    proxy-body-size: "10m"
    proxy-read-timeout: "600"
    proxy-send-timeout: "600"
    client-max-body-size: "10m"
    # SSL configuration
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384"
    # Rate limiting
    rate-limit: "100"
    rate-limit-window: "1m"
    # Logging
    log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent", "upstream_addr": "$upstream_addr", "upstream_status": "$upstream_status", "upstream_response_time": "$upstream_response_time", "upstream_response_length": "$upstream_response_length"}'

# Resources
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Node selector for ingress nodes
nodeSelector:
  kubernetes.io/os: linux

# Tolerations
tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule

# Affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - nginx-ingress
        topologyKey: kubernetes.io/hostname

# Pod configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "10254"
  prometheus.io/path: "/metrics"

# Service account
serviceAccount:
  create: true
  name: ""

# RBAC
rbac:
  create: true

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101
  fsGroup: 65534

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 101
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# Environment variables
env:
  POD_NAMESPACE: "ingress-nginx"
  POD_NAME: "nginx-ingress-controller"

# Health checks
livenessProbe:
  httpGet:
    path: /healthz
    port: 10254
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /healthz
    port: 10254
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Ingress class
ingressClass: nginx
