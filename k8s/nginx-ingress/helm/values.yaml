controller:
  service:
    type: LoadBalancer
    externalIPs: ["210.109.82.109"]  # 스크립트에서 자동으로 업데이트됨
    ports:
      http: 80
      https: 443
    nodePorts:
      http: 31030
      https: 32285
  
  # 리소스 설정
  resources:
    requests:
      cpu: 100m
      memory: 90Mi
    limits:
      cpu: 500m
      memory: 512Mi

# IngressClass 설정
ingressClassResource:
  enabled: true
  name: nginx
  default: true

# Tolerations
tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule

# Affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - nginx-ingress
        topologyKey: kubernetes.io/hostname

# Pod configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "10254"
  prometheus.io/path: "/metrics"

# Service account
serviceAccount:
  create: true
  name: ""

# RBAC
rbac:
  create: true

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 101
  fsGroup: 65534

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 101
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# Environment variables
env:
  POD_NAMESPACE: "ingress-nginx"
  POD_NAME: "nginx-ingress-controller"

# Health checks
livenessProbe:
  httpGet:
    path: /healthz
    port: 10254
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /healthz
    port: 10254
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Ingress class
ingressClass: nginx
